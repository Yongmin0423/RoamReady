'use client';

import { ReactNode, createContext, useContext, useId } from 'react';
import { useDialogStore } from '@/shared/store/dialog.store';

/**
 * Dialog 컨텍스트의 값 타입
 *
 * Dialog 컴포넌트 트리 내에서 공유되는 데이터를 정의합니다.
 *
 */
interface DialogContextValue {
  /** Dialog의 고유 식별자 */
  modalId: string;
}

/**
 * Dialog 컨텍스트
 *
 * Dialog.Root에서 제공되고 하위 컴포넌트들에서 소비됩니다.
 *
 */
const DialogContext = createContext<DialogContextValue | null>(null);

/**
 * Dialog 컨텍스트를 사용하는 커스텀 훅
 *
 * @throws {Error} Dialog.Root 외부에서 사용될 경우 에러를 발생시킵니다.
 * @returns {DialogContextValue} Dialog 컨텍스트 값 (modalId 포함)
 *
 * @example
 * ```tsx
 * function MyDialogComponent() {
 *   const { modalId } = useDialogContext();
 *   // modalId 사용...
 * }
 * ```
 */
export const useDialogContext = () => {
  const context = useContext(DialogContext);
  if (!context) {
    throw new Error('Dialog 컴포넌트는 <Dialog.Root> 안에서 사용해야 합니다.');
  }
  return context;
};

/**
 * Dialog 액션을 위한 커스텀 훅
 *
 * Dialog 내부에서 open/close 액션을 쉽게 사용할 수 있도록 해줍니다.
 * 또한 modalId를 자동으로 바인딩하여 수동으로 ID를 관리할 필요가 없습니다.
 *
 * @returns {Object} Dialog 액션 함수들과 modalId
 * @returns {function(): void} returns.close - 현재 Dialog를 닫는 함수
 * @returns {function(): void} returns.open - 현재 Dialog를 여는 함수
 * @returns {string} returns.modalId - 현재 Dialog의 ID (필요시 직접 접근용)
 *
 * @throws {Error} Dialog.Root 외부에서 사용될 경우 에러를 발생시킵니다.
 *
 * @example
 * ```tsx
 * function DialogContent() {
 *   const { close, open } = useDialogActions();
 *
 *   return (
 *     <div>
 *       <button onClick={close}>닫기</button>
 *       <button onClick={open}>다시 열기</button>
 *     </div>
 *   );
 * }
 * ```
 */
export const useDialogActions = () => {
  const { modalId } = useDialogContext();
  const { close, open } = useDialogStore();

  return {
    close: () => close(modalId),
    open: () => open(modalId),
    modalId, // 필요한 경우 ID에 직접 접근
  };
};

/**
 * DialogRoot 컴포넌트의 Props 타입
 */
interface DialogRootProps {
  /** Dialog 내부에 렌더링될 자식 요소들 */
  children: ReactNode;
  /**
   * Dialog의 고유 식별자 (선택사항)
   * 제공하지 않으면 useId()를 통해 자동으로 생성됩니다.
   * 여러 Dialog를 프로그래매틱하게 제어해야 하는 경우에만 수동으로 지정하세요.
   *
   * @default auto-generated using useId()
   */
  modalId?: string;
}

/**
 * Dialog 시스템의 루트 컨텍스트 프로바이더
 *
 * Dialog 컴포넌트 트리의 최상위에 위치하여 하위 컴포넌트들이
 * 공통된 modalId를 공유할 수 있도록 합니다.
 *
 * **주요 기능:**
 * - modalId 자동 생성 (useId 사용)
 * - 컨텍스트를 통한 modalId 공유
 * - 기존 코드와의 호환성 유지 (수동 modalId 지원)
 *
 * @param props - DialogRoot 컴포넌트의 props
 * @param props.children - Dialog 내부에 렌더링될 컴포넌트들
 * @param props.modalId - Dialog의 고유 식별자 (선택사항, 미제공시 자동 생성)
 *
 * @example
 * ```tsx
 * // 자동 ID 생성 (권장)
 * <Dialog.Root>
 *   <Dialog.Trigger>
 *     <button>Dialog 열기</button>
 *   </Dialog.Trigger>
 *   <Dialog.Content variant="complete">
 *     <MyDialogContent />
 *   </Dialog.Content>
 * </Dialog.Root>
 *
 * // 수동 ID 지정 (특수한 경우)
 * <Dialog.Root modalId="user-profile-dialog">
 *   <Dialog.Trigger>
 *     <button>프로필 수정</button>
 *   </Dialog.Trigger>
 *   <Dialog.Content variant="cancel">
 *     <ProfileEditForm />
 *   </Dialog.Content>
 * </Dialog.Root>
 * ```
 */
export function DialogRoot({ children, modalId }: DialogRootProps) {
  const autoGeneratedId = useId();
  const finalModalId = modalId || `dialog-${autoGeneratedId}`;

  return (
    <DialogContext.Provider value={{ modalId: finalModalId }}>
      {children}
    </DialogContext.Provider>
  );
}
